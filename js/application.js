// Generated by CoffeeScript 1.7.1
(function() {
  var SetupDemo;

  $(document).ready(function() {
    return new SetupDemo();
  });

  SetupDemo = (function() {
    function SetupDemo() {
      this.panel = $('.domflags-panel');
      this.tree = $('.dom-tree');
      this.treeLines = this.tree.find('code > span');
      this.treeFlags = this.getTreeFlags();
      this.folds = [
        {
          start: 17,
          end: 21
        }, {
          start: 15,
          end: 22
        }, {
          start: 14,
          end: 25
        }, {
          start: 7,
          end: 11
        }, {
          start: 6,
          end: 26
        }, {
          start: 5,
          end: 27
        }, {
          start: 4,
          end: 28
        }
      ];
      this.demoEvents();
    }

    SetupDemo.prototype.getTreeFlags = function() {
      return this.tree.find('span').filter(function() {
        if ($(this).hasClass('s')) {
          $(this).parent().addClass('flaggable');
        }
        return $(this).text() === "domflag";
      });
    };

    SetupDemo.prototype.initTree = function() {
      this.setupTreeNodes();
      this.foldingEvents();
      this.panelEvents();
      return this.tooltipEvents();
    };

    SetupDemo.prototype.setupTreeNodes = function() {
      var tooltipStr;
      tooltipStr = '<span class="tooltip">Add Domflag</span>';
      this.treeFlags.addClass('domflag-attr').parent().addClass('domflag-line');
      this.treeLines.find('span:last-of-type').after(tooltipStr).end().filter('.domflag-line').find('.tooltip').text('Remove Domflag');
      $('#line-2').addClass('non-flaggable');
      return this.foldBlock(this.folds);
    };

    SetupDemo.prototype.foldingEvents = function() {
      return $('.fold-true').on('click', (function(_this) {
        return function(event) {
          var $parent, foldObject, spanID;
          $parent = $(event.currentTarget).parent();
          if ($parent.hasClass('fold-block')) {
            return _this.unfoldBlock(event.currentTarget);
          } else {
            spanID = parseInt($(event.currentTarget)[0].id.replace(/\D/g, ''));
            foldObject = $.grep(_this.folds, function(obj) {
              return obj.start === spanID;
            });
            return _this.foldBlock(foldObject);
          }
        };
      })(this));
    };

    SetupDemo.prototype.unfoldBlock = function(target) {
      var leftVal;
      leftVal = parseInt($(target).parent().css('padding-left'));
      $(target).removeClass('fold-parent').attr('style', '').siblings().removeClass('fold-parent fold-inner').unwrap();
      return $(target).children('a').addClass('open');
    };

    SetupDemo.prototype.foldBlock = function(folds) {
      var $block, $end, $inner, $paddingLeft, $start, blockStr, fold, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = folds.length; _i < _len; _i++) {
        fold = folds[_i];
        $start = this.tree.find("#line-" + fold.start);
        $end = this.tree.find("#line-" + fold.end);
        $inner = this.tree.find($start).nextUntil($end);
        $block = this.tree.find("#line-" + (fold.start - 1)).nextUntil("#line-" + (fold.end + 1));
        $paddingLeft = Math.ceil($start.find('span:first-of-type').offset().left - this.tree.offset().left);
        $start.addClass('fold-true fold-parent').css('margin-left', "" + $paddingLeft + "px").children('a').css('left', "" + $paddingLeft + "px").removeClass('open');
        $end.addClass('fold-parent');
        $inner.addClass('fold-inner');
        blockStr = "<div class='fold-block' />";
        _results.push($block.wrapAll(blockStr));
      }
      return _results;
    };

    SetupDemo.prototype.demoEvents = function() {
      return $('#start-demo').on('click', (function(_this) {
        return function(event) {
          $(event.currentTarget).addClass('hide').parent().addClass('show-download');
          $('.devtools-toolbar, .devtools').addClass('open');
          _this.panel.addClass('open').find('li:first-child').addClass('demo');
          _this.initTree();
          return false;
        };
      })(this));
    };

    SetupDemo.prototype.panelEvents = function() {
      $('.devtools').on("transitionend webkitTransitionEnd", function() {
        $('.browser').addClass('open');
        $('#start-demo').addClass('hide');
        return $('#download').addClass('show');
      });
      return this.panel.on('click', 'li', (function(_this) {
        return function(event) {
          var $el, $elPos, $target, index;
          index = _this.panel.find('li').index(event.currentTarget);
          $el = _this.tree.find('.domflag-line').eq(index);
          $target = $('.target');
          if ($(event.currentTarget).hasClass('demo') && index < 2) {
            $target.addClass("pos-" + (index + 1));
            $(event.currentTarget).next().addClass('demo');
          } else {
            $target.hide();
          }
          _this.panel.find('li').removeClass('active').end().find(event.currentTarget).addClass('active').removeClass('demo new');
          _this.tree.find('span').removeClass('selected');
          $el.addClass('selected');
          if ($el.is(':hidden')) {
            $el.parentsUntil(_this.tree).filter('.fold-block').children().unwrap();
            $el.parents().children().removeClass('fold-parent fold-inner').attr('style', '');
          }
          $elPos = $el.offset().top;
          _this.treeTop = _this.tree.offset().top;
          _this.treeBottom = _this.treeTop + _this.tree.height();
          if (!($elPos > _this.treeTop && $elPos < _this.treeBottom)) {
            return _this.tree.scrollTo('.domflag-line.selected');
          }
        };
      })(this));
    };

    SetupDemo.prototype.tooltipEvents = function() {
      return $('.tooltip').on('click', (function(_this) {
        return function(event) {
          var $domflagStr, $parent, elString, flagItem, index, stringArray;
          $domflagStr = '<span class="na domflag-attr">domflag</span>';
          $parent = $(event.currentTarget).parent();
          if ($parent.hasClass('domflag-line')) {
            index = $parent.index('.domflag-line');
            $(event.currentTarget).text('Add Domflag');
            $(_this.panel).find('li').eq(index).remove();
            return $parent.removeClass('domflag-line').find('.domflag-attr').remove();
          } else {
            $(event.currentTarget).text('Remove Domflag');
            elString = [];
            stringArray = $(event.currentTarget).siblings().contents().filter(function(index) {
              var string;
              if (!this.data.match(/\>/g)) {
                string = this.data;
                if (index === 0) {
                  string = this.data.toUpperCase() + " ";
                }
                return elString.push(string.replace(/</g, ' ').replace(/\= /, '='));
              }
            });
            $parent.addClass('domflag-line').find('.s').after($domflagStr);
            index = $parent.index('.domflag-line');
            flagItem = "<li class='flag new'>" + (elString.join("")) + "</li>";
            if (index < $('ol.flags li').length) {
              return $('ol.flags li').eq(index).before(flagItem);
            } else {
              return $('ol.flags').append(flagItem);
            }
          }
        };
      })(this));
    };

    return SetupDemo;

  })();

}).call(this);
